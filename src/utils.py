import json
import numpy as np
import cv2
import os
import yaml


class UtillFuctions():
    @staticmethod
    def json_loader(path: str, type:str):
        # json file 오픈
        with open(path, type) as f:
            json_file = json.load(f)
        return json_file
    
    @staticmethod
    def rename_files(directory_path,frame_numbers:list,new_name_prefix = "frame",dir_num=0):
    # 디렉토리 내 파일 목록 가져오기
        files = os.listdir(directory_path)
        files.sort()  # 파일을 정렬하여 순서대로 이름 변경

        for index, filename in enumerate(files):
            old_file_path = os.path.join(directory_path, filename)
            
            # 파일이 실제 파일인지 확인 (폴더 무시)
            if os.path.isfile(old_file_path) and os.path.splitext(filename)[1] == ".jpg" :
                # 원하는 프레임일 경우만 수행
                if index in frame_numbers:
                    file_extension = os.path.splitext(filename)[1]  # 파일 확장자 추출
                    new_file_name = f"{dir_num}_{new_name_prefix}_{index}{file_extension}"
                    new_file_path = os.path.join(directory_path, new_file_name)
                    
                    # 파일 이름 변경
                    os.rename(old_file_path, new_file_path)
                    print(f"Renamed: {filename} -> {new_file_name}")
                else:
                    os.remove(old_file_path)
            

    @staticmethod
    def convert_to_coco(input_files, output_file, frame_numbers, image_height=1280, image_width=720,dir_num=0):
        annotations = []
        images = []
        categories = [{"id": 1, "name": "object", "supercategory": "none"}]
        annotation_id = 1

        for frame_index, (file_path, image_id) in enumerate(zip(input_files, frame_numbers)):
            # JSON 파일 로드
            with open(file_path, 'rb') as f:
                # print(file_path)
                data = json.load(f)

                # 이미지 정보 추가
                images.append({
                    "id": image_id,
                    "file_name": f"{dir_num}_frame_{image_id}.jpg",
                    "height": image_height,
                    "width": image_width
                })
                # 어노테이션 추가
                x_coords = [vector['X'] for vector in data['Vectors']]
                y_coords = [vector['Y'] for vector in data['Vectors']]
                # # 음수 값 필터링
                # filtered_x_coords = [x for x in x_coords if x >= 0]
                # filtered_y_coords = [y for y in y_coords if y >= 0]

                # # 음수 값이 존재했는지 확인
                # if len(filtered_x_coords) != len(x_coords):
                #     print(f"Warning: Negative X values detected and removed: {set(x_coords) - set(filtered_x_coords)}")
                # if len(filtered_y_coords) != len(y_coords):
                #     print(f"Warning: Negative Y values detected and removed: {set(y_coords) - set(filtered_y_coords)}")

                # 최소값 및 최대값 계산
                xmin = int(min(x_coords))
                xmax = int(max(x_coords))
                ymin = int(min(y_coords))
                ymax = int(max(y_coords))
                width = xmax - xmin
                height = ymax - ymin
                area = width * height

                annotation = {
                    "id": annotation_id,
                    "image_id": image_id,
                    "category_id": 1,  # 카테고리 ID
                    "bbox": [xmin, ymin, width, height],
                    "area": area,
                    "iscrowd": 0
                }
                annotations.append(annotation)
                annotation_id += 1

        # COCO 형식의 JSON 생성
        coco_format = {
            "info": {
                "description": "COCO dataset",
                "version": "1.0",
                "year": 2024,
                "contributor": "Generated by shb",
                "date_created": "2024-11-20"
            },
            "licenses": [
                {
                    "id": 1,
                    "name": "",
                    "url": ""
                }
            ],
            "images": images,
            "annotations": annotations,
            "categories": categories
        }

        # JSON 파일로 저장
        with open(output_file, 'w') as json_file:
            json.dump(coco_format, json_file, indent=4)

        print(f"COCO annotation JSON 파일 '{output_file}'이 생성되었습니다.")

    @staticmethod
    def merge_coco_jsons(input_dir, output_path):
        merged_data = {
            "info": None,
            "licenses": None,
            "images": [],
            "annotations": [],
            "categories": []
        }
        image_id_offset = 0
        annotation_id_offset = 0

        # Iterate through all JSON files in the input directory
        for idx, json_file in enumerate(os.listdir(input_dir)):
            if not json_file.endswith('.json'):
                continue
            
            json_path = os.path.join(input_dir, json_file)
            with open(json_path, 'r') as f:
                data = json.load(f)
            
            if idx == 0:
                # Add "info", "licenses", and "categories" only from the first file
                merged_data["info"] = data.get("info", {})
                merged_data["licenses"] = data.get("licenses", [])
                merged_data["categories"] = data.get("categories", [])
            
            # Merge "images" and update image IDs
            for image in data["images"]:
                image["id"] += image_id_offset
                merged_data["images"].append(image)

            # Merge "annotations" and update annotation and image IDs
            for annotation in data["annotations"]:
                annotation["id"] += annotation_id_offset
                annotation["image_id"] += image_id_offset
                merged_data["annotations"].append(annotation)

            # Update offsets
            image_id_offset = max(img["id"] for img in merged_data["images"]) + 1
            annotation_id_offset = max(ann["id"] for ann in merged_data["annotations"]) + 1

        # Write merged JSON to the output path
        with open(output_path, 'w') as f:
            json.dump(merged_data, f, indent=4)
        print(f"Merged JSON saved to: {output_path}")

    @staticmethod
    def draw_bounding_boxes(coco_json_path, image_dir):
    # COCO JSON 파일 로드
        with open(coco_json_path, 'r') as f:
            coco_data = json.load(f)

        # 이미지별로 bbox 정보 읽기
        for image_info in coco_data['images']:
            image_id = image_info['id']
            file_name = image_info['file_name']
            image_path = os.path.join(image_dir, file_name)

            # 이미지 로드
            image = cv2.imread(image_path)
            if image is None:
                print(f"이미지를 로드할 수 없습니다: {image_path}")
                continue

            # 해당 이미지의 어노테이션 필터링
            annotations = [ann for ann in coco_data['annotations'] if ann['image_id'] == image_id]

            # 바운딩 박스 그리기
            for ann in annotations:
                x, y, width, height = map(int, ann['bbox'])
                # 사각형 그리기
                cv2.rectangle(image, (x, y), (x + width, y + height), (0, 255, 0), 2)

                # 카테고리 ID 텍스트 추가
                category_id = ann['category_id']
                cv2.putText(image, f"ID: {category_id}", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
            cv2.imshow('Check Bounding box',image)
            cv2.waitKey()
            cv2.destroyAllWindows()

    @staticmethod
    def load_config(config_path:str):
        with open(config_path, 'r') as f:
            return yaml.safe_load(f)
    
